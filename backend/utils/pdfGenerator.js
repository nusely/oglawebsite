// Use a proper PDF generation library (optional dependency)
let puppeteer;
try {
  puppeteer = require('puppeteer');
} catch (error) {
  console.log('‚ö†Ô∏è  Puppeteer not installed. Using fallback PDF generation.');
  puppeteer = null;
}

const generatePDF = async (htmlContent, options = {}) => {
  try {
    // Check if Puppeteer is available
    if (puppeteer) {
      console.log('üìÑ Generating PDF with Puppeteer...');
      
      // Launch browser
      const browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });
      
      const page = await browser.newPage();
      
      // Set content and wait for images to load
      await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
      
      // Wait a bit more for background images to load
      await page.waitForTimeout(2000);
      
      // Generate PDF
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '20mm',
          right: '15mm',
          bottom: '20mm',
          left: '15mm'
        }
      });
      
      await browser.close();
      
      console.log('‚úÖ PDF generated successfully with Puppeteer, size:', pdfBuffer.length);
      return pdfBuffer;
    } else {
      throw new Error('Puppeteer not available');
    }
    
  } catch (error) {
    console.error('‚ùå Puppeteer PDF generation failed, using fallback PDF:', error.message);
    
    // Fallback to placeholder PDF
    const pdfContent = `
%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 595 842]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 200
>>
stream
BT
/F1 16 Tf
72 720 Td
(Proforma Invoice - Generated by Ogla) Tj
ET
BT
/F1 12 Tf
72 680 Td
(This is a fallback PDF. The full PDF with letterhead) Tj
ET
BT
/F1 12 Tf
72 660 Td
(will be generated when Puppeteer is properly configured.) Tj
ET
BT
/F1 10 Tf
72 620 Td
(Please check the email for the complete invoice details.) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000204 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
500
%%EOF
    `;
    
    const buffer = Buffer.from(pdfContent, 'utf8');
    console.log('‚úÖ Fallback PDF generated successfully, size:', buffer.length);
    return buffer;
  }
};

// Generate invoice PDF with letterhead
const generateInvoicePDF = async (invoiceData) => {
  try {
    console.log('üîÑ Starting invoice PDF generation for:', invoiceData.invoiceNumber);
    
    const letterheadUrl = 'https://res.cloudinary.com/dpznya3mz/image/upload/v1756651336/ogla/static/OGLA_SHEA_lh.jpg';
    const isAdmin = invoiceData.adminStamp;
  
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <style>
        @page {
          size: A4;
          margin: 0;
        }
        body {
          font-family: Arial, sans-serif;
          font-size: 11px;
          color: #333;
          margin: 0;
          padding: 0;
          background-image: url('${letterheadUrl}');
          background-size: 210mm 297mm;
          background-repeat: no-repeat;
          background-position: center;
          min-height: 297mm;
          position: relative;
        }
        .container {
          padding: 20mm 15mm;
          min-height: 257mm;
          position: relative;
          z-index: 1;
        }
        .header {
          text-align: center;
          border-bottom: 1px solid #b5a033;
          margin-bottom: 20px;
          padding-bottom: 8px;
        }
        .title {
          font-size: 1.6em;
          font-weight: bold;
          color: #b5a033;
          margin: 0;
        }
        .invoice-number {
          font-size: 0.9em;
          color: #666;
          font-weight: bold;
          margin: 5px 0 0 0;
        }
        .info-section {
          display: flex;
          justify-content: space-between;
          margin-bottom: 20px;
        }
        .info-box {
          flex: 1;
          margin: 0 10px;
        }
        .info-box:first-child {
          margin-left: 0;
        }
        .info-box:last-child {
          margin-right: 0;
        }
        .info-title {
          font-weight: bold;
          color: #b5a033;
          border-bottom: 1px solid #b5a033;
          margin-bottom: 5px;
          padding-bottom: 2px;
        }
        .items-table {
          width: 100%;
          border-collapse: collapse;
          margin: 20px 0;
          font-size: 0.8em;
        }
        .items-table th {
          background: #b5a033;
          color: white;
          padding: 8px 4px;
          text-align: left;
        }
        .items-table td {
          padding: 6px 4px;
          border-bottom: 1px solid #dee2e6;
        }
        .total-section {
          text-align: right;
          border-top: 2px solid #b5a033;
          margin-top: 15px;
          padding-top: 10px;
        }
        .total-label {
          font-weight: bold;
          font-size: 1.1em;
          margin-right: 10px;
        }
        .total-amount {
          font-weight: bold;
          font-size: 1.1em;
          color: #b5a033;
        }
        .terms {
          margin-top: 25px;
          padding: 10px;
          background: rgba(248,249,250,0.9);
          border-left: 3px solid #b5a033;
        }
        .terms h4 {
          font-size: 0.9em;
          color: #b5a033;
          margin: 0 0 10px 0;
        }
        .terms ul {
          font-size: 0.8em;
          margin: 0;
          padding-left: 20px;
        }
        .terms li {
          margin-bottom: 3px;
        }
        .bank-details {
          margin-top: 25px;
          padding: 15px;
          background: rgba(255,255,255,0.95);
          border: 2px solid #b5a033;
          border-radius: 8px;
        }
        .bank-details h4 {
          font-size: 1em;
          color: #b5a033;
          margin: 0 0 15px 0;
          text-align: center;
          border-bottom: 1px solid #b5a033;
          padding-bottom: 5px;
        }
        .bank-accounts {
          display: flex;
          justify-content: space-between;
          gap: 15px;
        }
        .bank-account {
          flex: 1;
          text-align: center;
          padding: 10px;
          background: rgba(248,249,250,0.8);
          border-radius: 5px;
          border: 1px solid #dee2e6;
        }
        .bank-name {
          font-weight: bold;
          color: #b5a033;
          font-size: 0.9em;
          margin-bottom: 5px;
        }
        .bank-branch {
          font-size: 0.7em;
          color: #666;
          margin-bottom: 5px;
        }
        .account-name {
          font-weight: bold;
          font-size: 0.8em;
          margin-bottom: 3px;
        }
        .account-number {
          font-family: 'Courier New', monospace;
          font-size: 0.8em;
          color: #333;
          background: #f8f9fa;
          padding: 2px 5px;
          border-radius: 3px;
        }
        .system-generated {
          position: absolute;
          bottom: 10mm;
          left: 50%;
          transform: translateX(-50%);
          font-size: 0.8em;
          color: #666;
          font-style: italic;
          background: rgba(255,255,255,0.9);
          padding: 5px 10px;
          border-radius: 3px;
          border: 1px solid #dee2e6;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1 class="title">Proforma Invoice</h1>
          <p class="invoice-number">Invoice #: ${invoiceData.invoiceNumber}</p>
        </div>

        <div class="info-section">
          <div class="info-box">
            <div class="info-title">Bill To:</div>
            <div><strong>Name:</strong> ${invoiceData.customer.firstName} ${invoiceData.customer.lastName}</div>
            <div><strong>Company:</strong> ${invoiceData.customer.companyName || 'N/A'}</div>
            <div><strong>Email:</strong> ${invoiceData.customer.email}</div>
            <div><strong>Phone:</strong> ${invoiceData.customer.phone || 'N/A'}</div>
          </div>
          <div class="info-box">
            <div class="info-title">Invoice Details:</div>
            <div><strong>Date:</strong> ${new Date(invoiceData.submittedAt).toLocaleDateString()}</div>
            <div><strong>Status:</strong> ${invoiceData.status || 'PENDING'}</div>
            <div><strong>Company Type:</strong> ${invoiceData.customer.companyType || 'N/A'}</div>
            <div><strong>Role:</strong> ${invoiceData.customer.companyRole || 'N/A'}</div>
          </div>
        </div>

        <table class="items-table">
          <thead>
            <tr>
              <th>Item</th>
              <th>Description</th>
              <th>Qty</th>
              <th>Unit Price</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            ${invoiceData.items.map(item => `
              <tr>
                <td>${item.name || 'Product'}</td>
                <td>${item.shortDescription || item.description || ''}</td>
                <td>${item.quantity}</td>
                <td>GH‚Çµ${item.price}</td>
                <td>GH‚Çµ${(item.price * item.quantity).toFixed(2)}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>

        <div class="total-section">
          <span class="total-label">Total:</span>
          <span class="total-amount">GH‚Çµ${invoiceData.totalAmount.toFixed(2)}</span>
        </div>

        <div class="bank-details">
          <h4>Bank Payment Details</h4>
          <div class="bank-accounts">
            <div class="bank-account">
              <div class="bank-name">Ecobank Ghana</div>
              <div class="bank-branch">Head Office, Ridge ‚Äì Accra</div>
              <div class="account-name">OGLA SHEA BUTTER & TRADING</div>
              <div class="account-number">1441002558413</div>
            </div>
            <div class="bank-account">
              <div class="bank-name">First Bank Ghana</div>
              <div class="bank-branch">Osu Branch ‚Äì Accra</div>
              <div class="account-name">OGLA SHEA BUTTER & TRADING</div>
              <div class="account-number">0203400000888</div>
            </div>
            <div class="bank-account">
              <div class="bank-name">Access Bank Ghana</div>
              <div class="bank-branch">Stadium Branch ‚Äì Accra</div>
              <div class="account-name">OGLA SHEA BUTTER & TRADING</div>
              <div class="account-number">100900031728</div>
            </div>
          </div>
        </div>

        <div class="terms">
          <h4>Terms & Conditions:</h4>
          <ul>
            <li>This is a Proforma Invoice and does not constitute a tax invoice</li>
            <li>Prices are subject to change without prior notice</li>
            <li>Delivery will be arranged upon confirmation of order</li>
            <li>All disputes are subject to Ghanaian law</li>
          </ul>
        </div>
        
        ${isAdmin ? '<div class="system-generated">System Generated</div>' : ''}
      </div>
    </body>
    </html>
  `;

    console.log('üìÑ HTML content prepared, calling generatePDF...');
    const pdfBuffer = await generatePDF(htmlContent);
    console.log('‚úÖ Invoice PDF generated successfully for:', invoiceData.invoiceNumber);
    
    return pdfBuffer;
  } catch (error) {
    console.error('‚ùå Invoice PDF generation failed:', error);
    throw error;
  }
};

module.exports = {
  generatePDF,
  generateInvoicePDF
};
